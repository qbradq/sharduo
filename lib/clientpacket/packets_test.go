package clientpacket

import (
	"testing"
)

func TestPackets(t *testing.T) {
	var tests = []struct {
		id     int
		data   []byte
		testfn func(t *testing.T, p Packet)
	}{
		{0x5D, []byte{0x5d, 0xed, 0xed, 0xed, 0xed, 0x71, 0x62, 0x72, 0x61, 0x64, 0x71, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x7f}, nil},
		{0x73, []byte{0x73, 0x00}, nil},
		{0x80, []byte{0x80, 0x6c, 0x61, 0x7a, 0x79, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x73, 0x64, 0x66, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff}, nil},
		{0x91, []byte{0x91, 0xdb, 0x1f, 0x2a, 0x70, 0x6c, 0x61, 0x7a, 0x79, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x73, 0x64, 0x66, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, nil},
		{0xA0, []byte{0xa0, 0x0, 0x0}, nil},
		// Unicode speech, no keywords
		{0xAD, []byte{0xad, 0x0, 0x26, 0x0, 0x2, 0xb2, 0x0, 0x3, 0x45, 0x4e, 0x55, 0x0, 0x0, 0x48, 0x0, 0x65, 0x0, 0x6c, 0x0, 0x6c, 0x0, 0x6f, 0x0, 0x20, 0x0, 0x44, 0x0, 0x6f, 0x0, 0x6c, 0x0, 0x6c, 0x0, 0x79, 0x0, 0x21, 0x0, 0x0},
			func(t *testing.T, p Packet) {
				sp := p.(*Speech)
				if sp.Text != "Hello Dolly!" {
					t.Fatal("Failed to decode speech")
				}
			}},
		// Ascii speach with keywords
		{0xAD, []byte{0xad, 0x0, 0x1d, 0xc0, 0x2, 0xb2, 0x0, 0x3, 0x45, 0x4e, 0x55, 0x0, 0x0, 0x30, 0x3c, 0x13, 0x41, 0x71, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x20, 0x62, 0x75, 0x79, 0x0},
			func(t *testing.T, p Packet) {
				sp := p.(*Speech)
				if sp.Text != "vendor buy" {
					t.Fatal("Failed to decode speech")
				}
			}},
		// A typical parsed line
		{0xAD, []byte{0xad, 0x0, 0x35, 0xc0, 0x2, 0xb2, 0x0, 0x3, 0x45, 0x4e, 0x55, 0x0, 0x0, 0x80, 0x2, 0x0, 0x20, 0x7, 0x0, 0x70, 0x3c, 0x13, 0x41, 0x71, 0x19, 0x90, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x20, 0x62, 0x75, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x61, 0x6e, 0x6b, 0x20, 0x67, 0x75, 0x61, 0x72, 0x64, 0x73, 0x0},
			func(t *testing.T, p Packet) {
				sp := p.(*Speech)
				if sp.Text != "vendor buy the bank guards" {
					t.Fatal("Failed to decode speech")
				}
			}},
		{0xBD, []byte{0xbd, 0x0, 0xb, 0x35, 0x2e, 0x30, 0x2e, 0x39, 0x2e, 0x31, 0x0}, nil},
	}

	for _, test := range tests {
		p := New(test.data)
		if _, ok := p.(*UnsupportedPacket); ok {
			t.Fatalf("Unsupported packet %X", test.id)
		}
		if test.id != p.GetID() {
			t.Fatalf("Packet %X ID mismatch", test.id)
		}
		if test.testfn != nil {
			test.testfn(t, p)
		}
	}
}
