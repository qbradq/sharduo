package clientpacket

import (
	"encoding/binary"
	"testing"
)

func TestPackets(t *testing.T) {
	var tests = []struct {
		id   byte
		data []byte
	}{
		{0x80, []byte{0x80, 0x6c, 0x61, 0x7a, 0x79, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x73, 0x64, 0x66, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff}},
		{0xA0, []byte{0xa0, 0x0, 0x0}},
	}

	for _, test := range tests {
		indata := test.data[1:]
		length := InfoTable[test.id].Length
		if length == 0 {
			t.Fatalf("Unsupported packet %X", test.id)
		}
		if length == -1 {
			length = int(binary.LittleEndian.Uint16(test.data[1:3]))
			indata = test.data[3:]
		}
		p := New(test.data[0], length, indata)
		if p == nil {
			t.Fatalf("Unsupported packet %X", test.id)
		}
		if test.id != p.GetID() {
			t.Fatalf("Packet %X ID mismatch", test.id)
		}
	}
}
